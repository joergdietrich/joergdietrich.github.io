<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Random Thoughts in a Random Universe - Jörg Dietrich</title><link>http://joergdietrich.github.io/</link><description></description><lastBuildDate>Sat, 17 Mar 2018 00:00:00 +0100</lastBuildDate><item><title>How I use git cherry-pick</title><link>http://joergdietrich.github.io/git_cherry-pick.html</link><description>&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;We have a very nice series of informal computing centric talks/seminars at the University Observatory Munich, labelled &amp;#8220;Code Coffee&amp;#8221;. I enjoy these a lot, although I prefer tea. Even for topics on which I already know a lot, I usually learn something new and interesting. The most recent installment …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jörg Dietrich</dc:creator><pubDate>Sat, 17 Mar 2018 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:joergdietrich.github.io,2018-03-17:/git_cherry-pick.html</guid><category>git</category><category>version control</category></item><item><title>Using matplotlib to plot over existing Figures</title><link>http://joergdietrich.github.io/matplotlib-overplot.html</link><description>&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Shortly before Christmas a paper by Nathalia Cibirka and colleagues appeared as &lt;a href="https://arxiv.org/abs/1612.06871"&gt;arXiv:1612.06871&lt;/a&gt; in which she studies the concentration of galaxy clusters using weak lensing. This topic is very close to my research interests and I immediately skimmed through the paper. The primary question in my mind was …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jörg Dietrich</dc:creator><pubDate>Thu, 26 Jan 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:joergdietrich.github.io,2017-01-26:/matplotlib-overplot.html</guid><category>python</category><category>matplotlib</category><category>mass-concentration relation</category></item><item><title>Python and numpy Bool Types</title><link>http://joergdietrich.github.io/python-numpy-bool-types.html</link><description>&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This blog post is triggered by a colleague stopping me in the hall and asking &amp;#8220;What does &lt;code&gt;~&lt;/code&gt; do in Python?&amp;#8221; She was surprised by the behavior of the &lt;code&gt;~&lt;/code&gt; operator when applied to Python bool types and I was surprised that it behaved differently on numpy bools than on Python bools …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jörg Dietrich</dc:creator><pubDate>Tue, 29 Nov 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:joergdietrich.github.io,2016-11-29:/python-numpy-bool-types.html</guid><category>python</category><category>numpy</category><category>scientific computing</category></item><item><title>Convergence of the Affine Invariant Ensemble Sampler</title><link>http://joergdietrich.github.io/emcee-convergence.html</link><description>&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The Affine-Invariant Ensemble Sampler (&lt;span class="caps"&gt;AIES&lt;/span&gt;) is a Monte-Carlo method particularly popular in astrophysics. The paper describing its widely used Python implementation &lt;a href="http://dan.iel.fm/emcee/"&gt;emcee&lt;/a&gt; is highly cited and the method is particularly popular because it has &amp;#8212; aside from the number of walkers, i.e., the number of chains &amp;#8212; no tunable&amp;nbsp;parameters.&lt;/p&gt;
&lt;p&gt;Huijser …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jörg Dietrich</dc:creator><pubDate>Mon, 20 Jun 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:joergdietrich.github.io,2016-06-20:/emcee-convergence.html</guid><category>python</category><category>emcee</category><category>scientific computing</category><category>monte carlo</category></item><item><title>Fun with Floating Point Precision in numpy</title><link>http://joergdietrich.github.io/floating-point-fun.html</link><description>&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;I recently had a bug in my code that obviously was caused by an issue with floating point precision but had me scratching my head how it came about. Here it&amp;nbsp;is:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[1]:&lt;/div&gt;

&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
        &lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;astropy.table&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;astropy&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cosmology&lt;/span&gt;

&lt;span class="n"&gt;cosmo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cosmology&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WMAP9 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jörg Dietrich</dc:creator><pubDate>Wed, 17 Feb 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:joergdietrich.github.io,2016-02-17:/floating-point-fun.html</guid><category>python</category><category>numpy</category><category>astropy</category><category>scientific computing</category></item><item><title>Are Theorists Smarter Than Observers?</title><link>http://joergdietrich.github.io/are-theorists-smarter.html</link><description>&lt;p&gt;




&lt;p&gt;While working through the close to 250 applications for PhD positions at the International Max Planck Research School (&lt;span class="caps"&gt;IMPRS&lt;/span&gt;) for Astrophysics&lt;a href="#fn1" name="fr1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; for the current round of applications, I noticed an odd pattern: Reference letter writers who saw a candidates strengths more in theory than in experiment seemed to rank these students higher compared to those whose strengths are more in&amp;nbsp;experiment.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jörg Dietrich</dc:creator><pubDate>Tue, 17 Feb 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:joergdietrich.github.io,2015-02-17:/are-theorists-smarter.html</guid><category>sociology of science</category><category>data analysis</category></item><item><title>Making Your Python Code Look Like Physics Equations</title><link>http://joergdietrich.github.io/python-physics-equations.html</link><description>&lt;p&gt;




&lt;p&gt;I have many reasons to like Python: rapid prototyping, powerful libraries, great interactive tools like the IPython shell and notebook, and the ability to write beautiful code. I will admit, the last one definitely is in the eye of the beholder. &lt;a href="http://rhodesmill.org/brandon/"&gt;Brandon Rhodes&lt;/a&gt; gave a &lt;a href="http://rhodesmill.org/brandon/talks/#python-aesthetic"&gt;good talk&lt;/a&gt; at PyCon Canada a couple of year ago in which he explained what makes Python beautiful to him. One of the points he made, and one that I wholeheartedly agree with, is that you can make Python code look just like the math you are coding up. We know how to write math; we know how to typeset equations so they look beautiful and are easy to read, and thus easier to understand. We can use that knowledge to write more readable Python&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;But I&amp;#8217;m not a mathematician, I&amp;#8217;m an astrophysicist. Can I take this further and make my code look like physics, not like math?
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jörg Dietrich</dc:creator><pubDate>Sat, 29 Mar 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:joergdietrich.github.io,2014-03-29:/python-physics-equations.html</guid><category>python</category><category>data analysis</category></item><item><title>How Much Do My Measurements Disagree?</title><link>http://joergdietrich.github.io/quantitative-data-disagreement.html</link><description>&lt;p&gt;




&lt;h2 id="-Or-why-&amp;quot;The-error-bars-overlap&amp;quot;-is-a-meaningless-statement."&gt; Or why &amp;#8220;The error bars overlap&amp;#8221; is a meaningless statement.&lt;a class="anchor-link" href="#-Or-why-&amp;quot;The-error-bars-overlap&amp;quot;-is-a-meaningless-statement."&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;







&lt;p&gt;In my work as an astrophysicist I have encountered quite a bit of confusion on how to quantify the level of disagreement between two or more measurements with error bars, or even more complex multi-dimensional confidence volumes. This is even more true this term when I am teaching an undergraduate lab course. Thinking a little about this myself, I realized that this is not something I have ever seen written up. At least not in any concise form. So I decided to create this little document, not only to educate others, but also to organize my own thoughts. I put an emphasis on developing the concepts and I make no attempt at&amp;nbsp;rigour.&lt;/p&gt;
&lt;p&gt;Suppose we have three measurements of the gravitational acceleration on the Earth&amp;#8217;s surface, all with their own error bars (or measurement uncertainties, if you prefer). These are shown in the plot below and the error bars indicate their $1\sigma$ standard deviation.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jörg Dietrich</dc:creator><pubDate>Tue, 04 Mar 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:joergdietrich.github.io,2014-03-04:/quantitative-data-disagreement.html</guid><category>statistics</category><category>data analysis</category></item><item><title>Blogging with IPython and Collapsible Input Cells</title><link>http://joergdietrich.github.io/notebook-collapse-input.html</link><description>&lt;p&gt;




&lt;p&gt;I learned about IPython Notebooks from the fantastic blog of &lt;a href="http://jakevdp.github.io/"&gt;jakevdp&lt;/a&gt;. Realizing what a great way they are to interactivly manipulate Python code and transform the results into web pages, I started playing around with them and the pelican site generator myself. I had a few science questions on my mind for which I thought writing things up with some nice graphical illustrations would clarify things for myself and maybe others. Then I arrived at a point where I had long input boxes in my web pages with Python code that was not very interesting. I just wanted to have some figures for illustration. Of course I could just generate some plots, save them and load them into the Notebook to display them. But that seemed like an unnecessary detour if I already created the plots in the notebook. Could I not just hide the input cells? It turns out the answer was apparently&amp;nbsp;&amp;#8220;no&amp;#8221;.&lt;/p&gt;
&lt;p&gt;So I interrupted the process of writing about the original problems that were on my mind and set out to modify the liquid_tags pelican plugin that generates these pages so that the input code cells can be hidden.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jörg Dietrich</dc:creator><pubDate>Sat, 08 Feb 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:joergdietrich.github.io,2014-02-08:/notebook-collapse-input.html</guid><category>python</category><category>pelican</category><category>blogging</category><category>notebook</category></item></channel></rss>